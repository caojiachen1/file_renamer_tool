name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # 触发条件：推送形如 v1.0.0 的标签
    branches:
      - main
      - master  # 支持通过commit信息自动触发release
  workflow_dispatch:  # 允许手动触发
    inputs:
      version_type:
        description: '版本更新类型'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: '自定义版本号 (例如: v2.0.1, 留空则自动递增)'
        required: false
        default: ''

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup CMake
      uses: lukka/get-cmake@latest
      
    - name: Setup CUDA 12.8
      uses: Jimver/cuda-toolkit@v0.2.26
      with:
        cuda: '12.8.0'
        method: 'network'
        use-github-cache: false
        log-file-suffix: 'cuda-install.log'
        
    - name: Verify CUDA installation
      shell: pwsh
      run: |
        Write-Host "检查CUDA安装..."
        try {
          $nvcc_version = nvcc --version
          Write-Host "NVCC版本信息:"
          Write-Host $nvcc_version
          
          # 检查CUDA路径
          if ($env:CUDA_PATH) {
            Write-Host "CUDA_PATH: $env:CUDA_PATH"
          }
          
          if ($env:CUDA_HOME) {
            Write-Host "CUDA_HOME: $env:CUDA_HOME"
          }
          
          # 检查关键文件
          $cuda_lib = "$env:CUDA_PATH\lib\x64"
          if (Test-Path $cuda_lib) {
            Write-Host "✓ CUDA库目录存在: $cuda_lib"
          } else {
            Write-Host "⚠ CUDA库目录不存在: $cuda_lib"
          }
          
          $cuda_include = "$env:CUDA_PATH\include"
          if (Test-Path $cuda_include) {
            Write-Host "✓ CUDA头文件目录存在: $cuda_include"
          } else {
            Write-Host "⚠ CUDA头文件目录不存在: $cuda_include"
          }
          
        } catch {
          Write-Error "CUDA验证失败: $($_.Exception.Message)"
          exit 1
        }
      
    - name: Get version from tag or input
      id: version
      shell: pwsh
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          # 手动触发的情况
          $custom_version = "${{ github.event.inputs.custom_version }}"
          
          if ($custom_version -and $custom_version.Trim() -ne "") {
            # 使用自定义版本号
            $version = $custom_version.Trim()
            Write-Host "使用自定义版本号: $version"
          } else {
            # 自动递增版本号
            $version_type = "${{ github.event.inputs.version_type }}"
            Write-Host "版本更新类型: $version_type"
            
            # 使用GitHub API获取最新的release
            try {
              $headers = @{
                'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
                'Accept' = 'application/vnd.github.v3+json'
              }
              
              $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -Headers $headers -ErrorAction SilentlyContinue
              
              if ($response -and $response.tag_name) {
                $latest_tag = $response.tag_name
                Write-Host "通过API找到最新release标签: $latest_tag"
              } else {
                # 如果没有release，尝试获取最新的tag
                $tags_response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/tags" -Headers $headers -ErrorAction SilentlyContinue
                if ($tags_response -and $tags_response.Length -gt 0) {
                  $latest_tag = $tags_response[0].name
                  Write-Host "通过API找到最新标签: $latest_tag"
                } else {
                  $latest_tag = "v2.0.0"
                  Write-Host "未找到任何标签，使用默认版本: $latest_tag"
                }
              }
            } catch {
              # 回退到git命令
              Write-Host "API调用失败，回退到git命令"
              $latest_tag = git describe --tags --abbrev=0 2>$null
              if (-not $latest_tag) {
                $latest_tag = "v2.0.0"
                Write-Host "未找到现有标签，使用默认版本: $latest_tag"
              } else {
                Write-Host "通过git找到最新标签: $latest_tag"
              }
            }
            
            # 解析版本号
            if ($latest_tag -match '^v(\d+)\.(\d+)\.(\d+)$') {
              $major = [int]$matches[1]
              $minor = [int]$matches[2]
              $patch = [int]$matches[3]
              
              # 根据类型递增版本号
              switch ($version_type) {
                "major" { 
                  $major++
                  $minor = 0
                  $patch = 0
                }
                "minor" { 
                  $minor++
                  $patch = 0
                }
                "patch" { 
                  $patch++
                }
              }
              
              $version = "v$major.$minor.$patch"
              Write-Host "自动递增后的版本: $version"
            } else {
              Write-Error "无法解析版本号格式: $latest_tag"
              exit 1
            }
          }
        } else {
          # 推送触发的情况 (标签推送或分支推送)
          if ("${{ github.ref_type }}" -eq "tag") {
            # 标签推送触发
            $version = "${{ github.ref_name }}"
            Write-Host "从标签获取版本: $version"
          } else {
            # 分支推送触发 - 检查commit信息来确定是否需要自动发布
            $commit_message = git log -1 --pretty=format:"%s%n%b"
            Write-Host "检查commit信息: $commit_message"
            
            # 检查commit信息中的版本控制关键词
            $auto_version_type = $null
            
            # 优先检查末尾的[]标记
            if ($commit_message -match '\[major\]$') {
              $auto_version_type = "major"
            } elseif ($commit_message -match '\[minor\]$') {
              $auto_version_type = "minor"
            } elseif ($commit_message -match '\[patch\]$') {
              $auto_version_type = "patch"
            }
            # 如果没有[]标记，再检查其他关键词
            elseif ($commit_message -match '\bmajor:|\bbreaking\s*change|\bBREAKING\s*CHANGE') {
              $auto_version_type = "major"
            } elseif ($commit_message -match '\bminor:|\bfeat:|\bfeature:') {
              $auto_version_type = "minor"
            } elseif ($commit_message -match '\bpatch:|\bfix:|\bbugfix:') {
              $auto_version_type = "patch"
            }
            
            if (-not $auto_version_type) {
              Write-Host "commit信息中未找到版本控制关键词，跳过自动发布"
              Write-Host "支持的标记格式:"
              Write-Host "  - 消息末尾: [major], [minor], [patch]"
              Write-Host "  - 前缀关键词: major:, minor:, patch:, feat:, fix:, etc."
              Write-Host "当前commit: $commit_message"
              exit 0
            }
            
            Write-Host "从commit信息检测到版本类型: $auto_version_type"
            
            # 使用GitHub API获取最新的release来自动计算版本
            try {
              $headers = @{
                'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
                'Accept' = 'application/vnd.github.v3+json'
              }
              
              $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/latest" -Headers $headers -ErrorAction SilentlyContinue
              
              if ($response -and $response.tag_name) {
                $latest_tag = $response.tag_name
                Write-Host "通过API找到最新release标签: $latest_tag"
              } else {
                # 如果没有release，尝试获取最新的tag
                $tags_response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/tags" -Headers $headers -ErrorAction SilentlyContinue
                if ($tags_response -and $tags_response.Length -gt 0) {
                  $latest_tag = $tags_response[0].name
                  Write-Host "通过API找到最新标签: $latest_tag"
                } else {
                  $latest_tag = "v2.0.0"
                  Write-Host "未找到任何标签，使用默认版本: $latest_tag"
                }
              }
              
              # 解析并递增版本号
              if ($latest_tag -match '^v(\d+)\.(\d+)\.(\d+)$') {
                $major = [int]$matches[1]
                $minor = [int]$matches[2]
                $patch = [int]$matches[3]
                
                switch ($auto_version_type) {
                  "major" { 
                    $major++
                    $minor = 0
                    $patch = 0
                  }
                  "minor" { 
                    $minor++
                    $patch = 0
                  }
                  "patch" { 
                    $patch++
                  }
                }
                
                $version = "v$major.$minor.$patch"
                Write-Host "基于commit信息自动递增版本: $latest_tag → $version"
              } else {
                Write-Error "无法解析版本号格式: $latest_tag"
                exit 1
              }
            } catch {
              Write-Error "API调用失败，无法自动生成版本"
              exit 1
            }
          }
        }
        
        # 确保版本格式正确 (v主版本.次版本.修订版本)
        if ($version -notmatch '^v\d+\.\d+\.\d+$') {
          Write-Error "版本格式错误。请使用 v主版本.次版本.修订版本 格式 (例如: v2.0.1)"
          Write-Error "当前版本: $version"
          exit 1
        }
        
        Write-Output "version=$version" >> $env:GITHUB_OUTPUT
        Write-Output "version_number=$($version.Substring(1))" >> $env:GITHUB_OUTPUT
        Write-Host "最终版本: $version"
        
    - name: Update version in CMakeLists.txt
      shell: pwsh
      run: |
        $version_number = "${{ steps.version.outputs.version_number }}"
        $cmake_content = Get-Content CMakeLists.txt -Raw
        $cmake_content = $cmake_content -replace 'project\(FileRenamerTool VERSION \d+\.\d+\.\d+', "project(FileRenamerTool VERSION $version_number"
        Set-Content CMakeLists.txt $cmake_content
        Write-Host "已更新 CMakeLists.txt 中的版本号为: $version_number"
        
    - name: Create and push tag (for manual trigger and auto release)
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref_type == 'branch')
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.version }}"
        
        # 检查标签是否已存在
        $existing_tag = git tag -l $version
        if ($existing_tag) {
          Write-Host "标签 $version 已存在，复用现有标签"
          # 检查远程是否也存在该标签
          $remote_tag = git ls-remote --tags origin $version
          if (-not $remote_tag) {
            Write-Host "远程不存在标签 $version，推送到远程"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git push origin $version
          } else {
            Write-Host "远程也存在标签 $version，直接复用"
          }
        } else {
          Write-Host "创建新标签: $version"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $version
          git push origin $version
          Write-Host "标签 $version 已创建并推送"
        }
        
    - name: Build project
      shell: cmd
      run: |
        echo 开始构建项目 (启用CUDA 12.8)...
        
        echo 配置CMake (启用CUDA)...
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DUSE_CUDA=ON
        if %errorlevel% neq 0 (
          echo CMake配置失败！
          exit /b %errorlevel%
        )
        
        echo 编译项目...
        cmake --build build --config Release --verbose
        if %errorlevel% neq 0 (
          echo 构建失败！
          exit /b %errorlevel%
        )
        
        echo 复制可执行文件到根目录...
        copy "build\Release\file_renamer_cli.exe" "file_renamer.exe" >nul 2>&1
        if exist "build\Release\file_renamer_cli.exe" (
          echo ✓ CUDA版本构建完成！
        ) else (
          echo ✗ 未找到构建产物！
          exit /b 1
        )
        
    - name: Verify build artifacts
      shell: pwsh
      run: |
        Write-Host "检查构建产物..."
        
        $release_exe = "build\Release\file_renamer_cli.exe"
        $root_exe = "file_renamer.exe"
        $debug_exe = "build\Debug\file_renamer_cli.exe"
        
        if (Test-Path $release_exe) {
          Write-Host "✓ 找到 Release 版本: $release_exe"
          $size = (Get-Item $release_exe).Length
          Write-Host "  文件大小: $([math]::Round($size/1KB, 2)) KB"
        } else {
          Write-Error "✗ 未找到 Release 版本: $release_exe"
          exit 1
        }
        
        if (Test-Path $debug_exe) {
          Write-Host "✓ 找到 Debug 版本: $debug_exe"
        } else {
          Write-Host "⚠ 未找到 Debug 版本: $debug_exe"
        }
        
        if (Test-Path $root_exe) {
          Write-Host "✓ 找到根目录副本: $root_exe"
        } else {
          Write-Host "⚠ 未找到根目录副本: $root_exe"
        }
        
    - name: Prepare release assets
      shell: pwsh
      run: |
        Write-Host "准备发布文件 (CUDA版本)..."
        
        # 创建发布目录
        New-Item -ItemType Directory -Force -Path "release-assets"
        
        # 复制主要可执行文件 (CUDA版本)
        $version = "${{ steps.version.outputs.version }}"
        $release_name = "file_renamer_cli_$($version)_windows_x64_cuda12.8.exe"
        Copy-Item "build\Release\file_renamer_cli.exe" "release-assets\$release_name"
        
        Write-Host "发布文件准备完成："
        Get-ChildItem "release-assets" | ForEach-Object {
          Write-Host "  - $($_.Name) ($([math]::Round($_.Length/1KB, 2)) KB)"
        }
        
    - name: Create release notes
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.version }}"
        
        # 获取最新的commit信息
        $commit_message = git log -1 --pretty=format:"%s"
        $commit_body = git log -1 --pretty=format:"%b"
        $commit_hash = git log -1 --pretty=format:"%h"
        
        # 创建简洁的发布说明
        $content = @()
        $content += "## 📦 File Renamer CLI Tool $version (CUDA 12.8)"
        $content += ""
        $content += "🚀 **GPU加速版本** - 支持NVIDIA GPU并行计算，显著提升大文件批量重命名性能"
        $content += ""
        
        # 添加commit信息
        if ($commit_message) {
          $content += "- $commit_message"
          if ($commit_body -and $commit_body.Trim() -ne "") {
            $commit_body.Split("`n") | ForEach-Object {
              if ($_.Trim() -ne "") {
                $content += "- $($_.Trim())"
              }
            }
          }
          $content += ""
          $content += "*Commit: $commit_hash*"
          $content += ""
        }
        
        # 添加使用说明
        $content += "使用方法"
        $content += ""
        $content += "**预览模式**"
        $content += '```cmd'
        $content += 'file_renamer.exe "C:\MyFiles" -x jpg,png'
        $content += '```'
        $content += ""
        $content += "**执行重命名：**"
        $content += '```cmd'
        $content += 'file_renamer.exe "C:\MyFiles" -x jpg,png -e'
        $content += '```'
        $content += ""
        $content += "**更多选项：**"
        $content += '```cmd'
        $content += 'file_renamer.exe --help'
        $content += '```'
        $content += ""
        $content += "系统要求"
        $content += "- Windows 10/11 (x64)"
        $content += "- NVIDIA GPU (可选，用于GPU加速)"
        $content += "- CUDA 12.8兼容的显卡驱动"
        $content += ""
        $content += "**注意：** 如果系统没有兼容的NVIDIA GPU，程序会自动回退到CPU模式运行"
        
        $content | Out-File "release-notes.md" -Encoding UTF8
        Write-Host "发布说明已生成"
        
    - name: Create Release
      id: create_release
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $release_name = "File Renamer CLI Tool $version"
        
        # 检查Release是否已存在
        try {
          $headers = @{
            'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
            'Accept' = 'application/vnd.github.v3+json'
          }
          
          Write-Host "检查Release是否存在: $version"
          $existing_release = $null
          
          try {
            $existing_release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/$version" -Headers $headers
            Write-Host "找到现有Release: $version"
          } catch {
            if ($_.Exception.Response.StatusCode -eq 404) {
              Write-Host "Release $version 不存在，将创建新Release"
              $existing_release = $null
            } else {
              throw $_.Exception
            }
          }
          
          if ($existing_release) {
            Write-Host "Release $version 已存在，复用现有Release"
            Write-Host "Release ID: $($existing_release.id)"
            Write-Host "Release URL: $($existing_release.html_url)"
            
            # 输出现有Release信息供后续步骤使用
            Write-Output "upload_url=$($existing_release.upload_url)" >> $env:GITHUB_OUTPUT
            Write-Output "html_url=$($existing_release.html_url)" >> $env:GITHUB_OUTPUT
            Write-Output "id=$($existing_release.id)" >> $env:GITHUB_OUTPUT
            Write-Output "created=false" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "创建新Release: $version"
            
            # 读取release notes
            $body = Get-Content "release-notes.md" -Raw -Encoding UTF8
            
            $release_data = @{
              tag_name = $version
              target_commitish = "main"
              name = $release_name
              body = $body
              draft = $false
              prerelease = $false
            } | ConvertTo-Json -Depth 10
            
            $new_release = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases" -Method POST -Headers $headers -Body $release_data
            
            Write-Host "新Release已创建"
            Write-Host "Release ID: $($new_release.id)"
            Write-Host "Release URL: $($new_release.html_url)"
            
            # 输出新Release信息供后续步骤使用
            Write-Output "upload_url=$($new_release.upload_url)" >> $env:GITHUB_OUTPUT
            Write-Output "html_url=$($new_release.html_url)" >> $env:GITHUB_OUTPUT
            Write-Output "id=$($new_release.id)" >> $env:GITHUB_OUTPUT
            Write-Output "created=true" >> $env:GITHUB_OUTPUT
          }
        } catch {
          Write-Error "处理Release时出错: $($_.Exception.Message)"
          Write-Error "状态码: $($_.Exception.Response.StatusCode)"
          Write-Error "详细信息: $($_.Exception.Response.StatusDescription)"
          exit 1
        }
        
    - name: Upload Release Asset - Main Executable
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $asset_name = "file_renamer_cli_$($version)_windows_x64_cuda12.8.exe"
        $asset_path = "release-assets/$asset_name"
        $upload_url = "${{ steps.create_release.outputs.upload_url }}"
        
        # 检查文件是否存在
        if (-not (Test-Path $asset_path)) {
          Write-Error "找不到要上传的文件: $asset_path"
          exit 1
        }
        
        try {
          $headers = @{
            'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
            'Content-Type' = 'application/octet-stream'
          }
          
          # 检查Release中是否已存在同名文件
          $release_id = "${{ steps.create_release.outputs.id }}"
          $assets_url = "https://api.github.com/repos/${{ github.repository }}/releases/$release_id/assets"
          
          Write-Host "检查现有文件..."
          try {
            $existing_assets = Invoke-RestMethod -Uri $assets_url -Headers @{
              'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
              'Accept' = 'application/vnd.github.v3+json'
            }
            
            $existing_asset = $existing_assets | Where-Object { $_.name -eq $asset_name }
            
            if ($existing_asset) {
              Write-Host "文件 $asset_name 已存在于Release中，删除旧版本"
              $delete_url = "https://api.github.com/repos/${{ github.repository }}/releases/assets/$($existing_asset.id)"
              Invoke-RestMethod -Uri $delete_url -Method DELETE -Headers @{
                'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
              }
              Write-Host "旧版本已删除"
            } else {
              Write-Host "文件 $asset_name 不存在，准备上传新文件"
            }
          } catch {
            Write-Host "检查现有文件时出错，继续上传: $($_.Exception.Message)"
          }
          
          # 准备上传URL
          $upload_url_clean = $upload_url -replace '\{\?name,label\}', "?name=$asset_name"
          Write-Host "上传URL: $upload_url_clean"
          
          # 读取文件并上传
          $file_bytes = [System.IO.File]::ReadAllBytes((Resolve-Path $asset_path))
          Write-Host "文件大小: $([math]::Round($file_bytes.Length/1KB, 2)) KB"
          
          $response = Invoke-RestMethod -Uri $upload_url_clean -Method POST -Headers $headers -Body $file_bytes
          
          Write-Host "✓ 文件上传成功: $asset_name"
          Write-Host "  下载URL: $($response.browser_download_url)"
          Write-Host "  文件大小: $([math]::Round($response.size/1KB, 2)) KB"
          
        } catch {
          Write-Error "上传文件失败: $($_.Exception.Message)"
          Write-Error "状态码: $($_.Exception.Response.StatusCode)"
          Write-Error "状态描述: $($_.Exception.Response.StatusDescription)"
          
          if ($_.Exception.Response) {
            try {
              $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
              $responseBody = $reader.ReadToEnd()
              Write-Error "响应内容: $responseBody"
            } catch {
              Write-Host "无法读取响应内容"
            }
          }
          exit 1
        }

    - name: Build Summary
      shell: pwsh
      run: |
        $created = "${{ steps.create_release.outputs.created }}"
        $action = if ($created -eq "true") { "创建" } else { "复用" }
        
        Write-Host "🎉 CUDA版本构建和发布完成！"
        Write-Host ""
        Write-Host "📋 构建摘要:"
        Write-Host "  版本: ${{ steps.version.outputs.version }}"
        Write-Host "  CUDA版本: 12.8"
        Write-Host "  GPU加速: 已启用"
        Write-Host "  Release操作: $action"
        Write-Host "  发布URL: ${{ steps.create_release.outputs.html_url }}"
        Write-Host ""
        Write-Host "📦 发布的文件:"
        Get-ChildItem "release-assets" | ForEach-Object {
          Write-Host "  ✓ $($_.Name)"
        }
        Write-Host ""
        Write-Host "🔗 下载链接:"
        Write-Host "  Release页面: ${{ steps.create_release.outputs.html_url }}"
        Write-Host ""
        Write-Host "⚡ 性能提升:"
        Write-Host "  • GPU并行哈希计算"
        Write-Host "  • 支持Maxwell到Blackwell架构"
        Write-Host "  • 自动CPU/GPU模式切换"
